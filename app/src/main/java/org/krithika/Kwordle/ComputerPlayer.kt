package org.krithika.Kwordle

import android.util.Log

class ComputerPlayer(private var _listOfWords: HashSet<String>) : Player {
    // represents the actual word generated by CPU
    private var _actualWord : String = ""
    // represents the word that the CPU guesser is trying to build up
    private val _guess : StringBuilder = StringBuilder("_____")
    private val _misplacedLetters : HashMap<Char, ArrayList<Int>> = HashMap()
    private val _notPresentLetters : HashSet<Char> = HashSet()
    private var _currentGuess : String = "     "

    override fun prepareWord() {
        _actualWord = generateWord()
    }

    override fun guessWord(gameView: GameView, clue : String) {
        processGivenClueInformation(clue)
        _currentGuess = getGuess().uppercase()
        gameView.setCurrentGuessWord(_currentGuess)
    }

    override fun provideClue(guess: String, gameView: GameView) {
        gameView.setCurrentGuessClue(guess, getClueString(guess))
    }

    private fun processGivenClueInformation(clue : String) {
        _listOfWords.remove(_currentGuess)
        clue
            .forEachIndexed { index, letter -> letterSetModificationActions(letter, index) }
        _listOfWords = HashSet(_listOfWords.filter { word -> wordIsFeasible(word) })
    }

    private fun wordIsFeasible(word : String): Boolean {
        val upperWord = word.uppercase()
        // check against the correct letters first
        var index = 0

        for (letter in _guess.toString()) {
            // check against the correct letters first
            if (letter != '_') {
                if (upperWord[index] != letter) {
                    return false
                }
            }
            index++
        }

        index = 0
        for (letter in upperWord) {
            // check against misplaced letters and not present letters
            if (_misplacedLetters[letter]?.contains(index) == true) {
                return false
            } else if (_notPresentLetters.contains(letter)) {
                return false
            }
            index++
        }

        // check to make sure that the upperWord contains all misplaced letters
        for ((key, value) in _misplacedLetters) {
            if (!upperWord.contains(key)) {
                return false
            }
        }
        return true
    }

    private fun letterSetModificationActions(letter: Char, index : Int) {
        when(letter) {
            'G' -> _guess[index] = _currentGuess[index]
            'Y' -> {
                if (!(_misplacedLetters.containsKey(_currentGuess[index]))) {
                    _misplacedLetters[_currentGuess[index]] = ArrayList()
                }
                _misplacedLetters[_currentGuess[index]]?.add(index)
            }
            '_' -> {
                if (_misplacedLetters.containsKey(_currentGuess[index])) {
                    _misplacedLetters[_currentGuess[index]]?.add(index)
                } else if (!(_guess.contains(_currentGuess[index]))) {
                    _notPresentLetters.add(_currentGuess[index])
                }
            }
        }
    }

    private fun generateWord() : String {
        //var it : Iterator<HashSet<String>> = _words.iterator
        //val index : Int = 0

        val randomNum: Int = (0 until _listOfWords.size - 1).random()

        for ((i, word) in _listOfWords.withIndex()) {
            if (i == randomNum) {
                _actualWord = word.uppercase()
            }
        }
        Log.d("ComputerPlayer", _actualWord)
        return _actualWord
    }

    private fun returnIndexLetter(ch: Char, modifiedWord: StringBuilder): Int {
        modifiedWord.forEachIndexed { i, oCh -> if (oCh == ch) return i }
        return -1
    }

    private fun getClueString(guess: String) : String {
        val guessClue = StringBuilder()
        guessClue.append("_____")
        val modifiedWord = StringBuilder()
        modifiedWord.append(_actualWord)

        for (i in 0..4) {
            if (modifiedWord[i] == guess[i]) {
                guessClue[i] = ClueType.CORRECT_CHAR.ch
                modifiedWord.replace(i, i + 1, " ")
            }
        }

        for (i in 0..4) {
            if (guessClue[i] != ClueType.CORRECT_CHAR.ch) {
                val result: Int = returnIndexLetter(guess[i], modifiedWord)
                if (result != -1) {
                    guessClue[i] = ClueType.MISPLACED_CHAR.ch
                    modifiedWord.replace(result, result + 1, " ")
                }
            }
        }
        return guessClue.toString()
    }

    private fun getGuess(): String {
        var firstEle = ""
        for (word in _listOfWords) {
            firstEle = word
            break
        }
        return firstEle
    }
}
